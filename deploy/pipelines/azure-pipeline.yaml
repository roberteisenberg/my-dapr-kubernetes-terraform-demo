# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'deploy/pipelines/*'

pool:
  vmImage: ubuntu-20.04

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'my-dapr-kubernetes-terraform-demo'
  azureLocation: 'westus2'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/deploy/terraform'
  terraformVersion: '1.8.3'

stages:
  - stage: TerraformValidation
    displayName: TerraformContinuousIntegration - Validation
    jobs:
    - job: Validate
      continueOnError: false
      steps:
      #Step 1: run the Checkov Static Code Analysis
      - bash: $(terraformWorkingDirectory)/checkov.sh $(terraformWorkingDirectory)
        displayName: Checkov Static Code Analysis
      #Step 2: install Terraform on the Azure Pipelines agent
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(terraformVersion)
      # Step 3: run Terraform init to initialize the workspace
      - task: TerraformCLI@1
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(terraformWorkingDirectory)
      # Step 4: run Terraform validate to validate HCL syntax
      - task: TerraformCLI@1
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(terraformWorkingDirectory)
  - stage: TerraformDeploy
    condition: succeeded('TerraformValidation')
    dependsOn: TerraformValidation
    displayName: Terraform Module - Validation
    jobs:
      - job: apply
        steps:
          #Step 1: install Terraform on the Azure Pipelines agent
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)
          # Step 2: run Terraform init to initialize the workspace
          - task: TerraformCLI@1
            displayName: 'Run terraform init'
            inputs:
              command: init
              workingDirectory: $(terraformWorkingDirectory)
          # Step 3: run Terraform plan to validate HCL syntax
          - task: TerraformCLI@1
            displayName: 'Run terraform plan'
            inputs:
              command: plan
              workingDirectory: $(terraformWorkingDirectory)
              environmentServiceName: $(serviceConnection)
              commandOptions: -var location=$(azureLocation)
          # Step 4: run Terraform to apply
          - task: TerraformCLI@1
            displayName: 'terraform apply'
            inputs:
              command: apply
              workingDirectory: $(terraformWorkingDirectory)
              environmentServiceName: $(serviceConnection)
